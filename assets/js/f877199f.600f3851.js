"use strict";(self.webpackChunkmaptaskr_docs_copy=self.webpackChunkmaptaskr_docs_copy||[]).push([[5104],{41547:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=n(74848),a=n(28453);const i={title:"Tutorials | Datasource Layer Infobox Customization | Configuring Custom.JS",sidebar_label:"Configuring Custom.JS"},s="Configuring Custom.JS",r={id:"tutorials/maptaskr-for-dynamics-365-datasource-infobox-data/configuring-custom-js",title:"Tutorials | Datasource Layer Infobox Customization | Configuring Custom.JS",description:"Below is a snippet of the Custom.JS code for your reference",source:"@site/docs/tutorials/maptaskr-for-dynamics-365-datasource-infobox-data/configuring-custom-js.md",sourceDirName:"tutorials/maptaskr-for-dynamics-365-datasource-infobox-data",slug:"/tutorials/maptaskr-for-dynamics-365-datasource-infobox-data/configuring-custom-js",permalink:"/docs/tutorials/maptaskr-for-dynamics-365-datasource-infobox-data/configuring-custom-js",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Tutorials | Datasource Layer Infobox Customization | Configuring Custom.JS",sidebar_label:"Configuring Custom.JS"},sidebar:"maptaskrSidebar",previous:{title:"Introduction",permalink:"/docs/tutorials/maptaskr-for-dynamics-365-datasource-infobox-data/introduction"},next:{title:"Introduction",permalink:"/docs/tutorials/maptaskr-for-dynamics-365-layer-zoom-control/introduction"}},l={},c=[];function d(t){const e={a:"a",code:"code",h1:"h1",img:"img",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"configuring-customjs",children:"Configuring Custom.JS"}),"\n",(0,o.jsx)(e.p,{children:"Below is a snippet of the Custom.JS code for your reference"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'/* place your custom JS Code here. */\nconst onValidateFailErrorMessage = \'Please upload a file or draw a shape\'; //error message to display when the map validation errors\nconst onUploadFailErrorMessage = \'Something has gone wrong during submission, please check your connection and try again.\';\nconst onIntersectionMessage = \'Intersections / Exclusions have been found, please check your shapes and try again.\';\n\nasync function clientValidationFunction(executionContext, controlId) {\n\t//user defined validation function, can use the following for getting the list of shapes, annotations and uploaded files.\n\t//if the user needs to fix the shapes, throw an error.\n\n\tconsole.log(\'Validating shapes with:\');\n\tconsole.log(executionContext);\n\tconsole.log(controlId);\n\n\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\tif (!maptaskrControl) {\n\t\tconsole.error(\'Maptaskr Control not found\');\n\t\treturn;\n\t}\n\n\t//let shapes = _getShapes();\n\t//let annotation = _getAnnotation();\n\t//let uploads = _getUploadedFiles();\n\t//testing shape intersections and determine what to do with them\n\tconst shapeIntersections = await maptaskrControl.getShapeIntersections();\n\tif (shapeIntersections && shapeIntersections.length > 0) {\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Warning\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\t//throw new Error(onIntersectionMessage);\n\t\t}\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Error\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\tthrow new Error(onIntersectionMessage);\n\t\t}\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Exclusion\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\tthrow new Error(onIntersectionMessage);\n\t\t}\n\t}\n\n\t//you can also test to make sure your shapes are in the correct position, orintation, contained within eachother, any geometric tests here.\n\n\t//shapes will come in the format:\n\t// {\n\t//   "type": "FeatureCollection",\n\t//   "features": [\n\t//     {\n\t//       "type": "Feature",\n\t//       "geometry": {\n\t//         "type": "Polygon",\n\t//         "coordinates": [\n\t//           [\n\t//             [\n\t//               12899598.276481498,\n\t//               -3758060.96802893\n\t//             ],\n\t//      ...\n\t//           ]\n\t//         ]\n\t//       },\n\t//       "properties": {\n\t//         "uploadDocType": "Envelope",\n\t//         "markerType": "MARKER_SHAPE"\n\t//       }\n\t//     }\n\t//   ],\n\t//   "DocumentType": "Envelope",\n\t//   "annotationId": "1ffb72d6-c7c3-ed11-83fd-002248e1bcf1",\n\t//   "longlat": [\n\t//     12899440.776481498,\n\t//     -3758143.46802893\n\t//   ],\n\t//   "styleProperty": {\n\t//     "geometry_": null,\n\t//     "fill_": {\n\t//       "color_": "rgba(149,255,0,0.1)"\n\t//     },\n\t//  ...\n\t//   }\n\t// }\n\n\t//if you require a specific subset of objects, please look into the shapes, annotations, or uploads to ensure specific number of shapes or named shapes are included.\n}\n\nif (globalThis && globalThis.top) {\n\tglobalThis.top.maptaskrReady = function (pageContext, controlId) {\n\t\tconsole.log(\'Maptaskr Map ID: \' + controlId + \' has Loaded\');\n\n\t\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\n\t\tif (maptaskrControl) {\n\t\t\t/* Use the following console logs to uniquely identify your map */\n\t\t\t// console.log(pageContext);\n\t\t\t// console.log(maptaskrControl.registeredLocation);\n\t\t\t// console.log(maptaskrControl.webresourceLocation);\n\n\t\t\t/* register the correct client validation function here */\n\t\t\tmaptaskrControl.clientValidationFunction = clientValidationFunction;\n\n\t\t\t/* put your setup methods here */\n\t\t\t/* e.g. maptaskrControl.disableSaving = true; - this will disable the inbuilt save methods, you an use maptaskrControl.saveShapes() to save your own shapes.*/\n\n\t\t\t/* put your event registrations here. */\n\t\t\t/*  e.g. maptaskrControl.on("FeaturesSelected", ...) */\n\t\t}\n\t};\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"At the very bottom of the file, let's declare two functions that we will use wait for the infobox modal to render and separately to open the record modal dialog when clicking on the record title on the infobox."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"function waitForPopup(selector, timeout = 3000) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst interval = 100; // Check every 100ms\n\n\t\tlet elapsedTime = 0;\n\n\t\tconst checkExistence = () => {\n\t\t\tconst popup = $(selector);\n\n\t\t\tif (popup.length && popup.find('h2').text().trim().length > 0) {\n\t\t\t\tresolve(popup);\n\t\t\t} else if (elapsedTime >= timeout) {\n\t\t\t\treject(new Error(`Timeout: ${selector} did not meet conditions after ${timeout}ms`));\n\t\t\t} else {\n\t\t\t\telapsedTime += interval;\n\n\t\t\t\tsetTimeout(checkExistence, interval);\n\t\t\t}\n\t\t};\n\n\t\tcheckExistence();\n\t});\n}\n\nfunction openModalDialog(entityType, entityId) {\n\tlet pageInput = { pageType: 'entityrecord', entityName: entityType, formType: 2, entityId: entityId };\n\n\tlet pageOptions = { target: 2, position: 1, width: { value: 50, unit: '%' } };\n\n\tXrm.Navigation.navigateTo(pageInput, pageOptions);\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Now we need to register the appropriate extension function within the ",(0,o.jsx)(e.code,{children:"maptaskrReady"})," functional scope. For this, we will use the ",(0,o.jsx)(e.a,{href:"/docs/dynamics-365/registerable-events/map-interaction-events#featuresselected",children:"FeaturesSelected"})," event to ensure we fire the neccessary logic only when the correct feature has been selected. In this case we specifically want this to target features that happen to be custom POI Data (how we internally differentiate between layers and custom data) AND where the entity name is ",(0,o.jsx)(e.code,{children:"Account"}),". You can change this entity name to match whichever entity you wish to target."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"if (globalThis && globalThis.top) {\n\tglobalThis.top.maptaskrReady = function (pageContext, controlId) {\n\t\tconsole.log('Maptaskr Map ID: ' + controlId + ' has Loaded');\n\n\t\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\n\t\tif (maptaskrControl) {\n\t\t\tmaptaskrControl.clientValidationFunction = clientValidationFunction;\n\n\t\t\t//highlight-start\n\t\t\tmaptaskrControl.on('FeaturesSelected', function (featureArray) {\n\t\t\t\tlet featureArrayAsObject = JSON.parse(featureArray);\n\t\t\t\t//check that there are features available\n\t\t\t\tif (featureArrayAsObject.length >= 1) {\n\t\t\t\t\t//wait for the infobox to populate...\n\t\t\t\t\twaitForPopup('.pointer-popup').then((popup) => {\n\t\t\t\t\t\tfor (let i = 0; i < featureArrayAsObject.length; i++) {\n\t\t\t\t\t\t\tlet feature = featureArrayAsObject[i];\n\t\t\t\t\t\t\t//check that the feature contains data and is of the correct type.\n\t\t\t\t\t\t\tif (feature && feature.attributes && feature.attributes.CustomPoiData) {\n\t\t\t\t\t\t\t\tlet featureData = feature.attributes.CustomPoiData;\n\n\t\t\t\t\t\t\t\tif (featureData.entityName == 'account') {\n\t\t\t\t\t\t\t\t\tif ($('.pointer-popup h2').text().indexOf(featureData.name) > -1) {\n\t\t\t\t\t\t\t\t\t\t//replace the title with a clickable one and populate a loading text in the details pane\n\t\t\t\t\t\t\t\t\t\tlet newTitle = '<h2>';\n\t\t\t\t\t\t\t\t\t\tnewTitle += \"<a href='#' onclick='openModalDialog(\\\"\" + featureData.entityName + '\",\"' + featureData.entityId + '\")\\'>';\n\t\t\t\t\t\t\t\t\t\tnewTitle += featureData.name;\n\t\t\t\t\t\t\t\t\t\tnewTitle += '</a>';\n\t\t\t\t\t\t\t\t\t\tnewTitle += '</h2>';\n\t\t\t\t\t\t\t\t\t\t$('.pointer-popup h2').parent().html(newTitle);\n\t\t\t\t\t\t\t\t\t\tlet newInfoboxDetails = \"<p class='loadingDetails'>\";\n\t\t\t\t\t\t\t\t\t\tnewInfoboxDetails += 'loading...';\n\t\t\t\t\t\t\t\t\t\tnewInfoboxDetails += '</p>'; //add it to the POI Details tab\n\n\t\t\t\t\t\t\t\t\t\tif ($('.pointer-popup #poiDetailsTab').length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t$('.pointer-popup #poiDetailsTab .tools__row').html(newInfoboxDetails);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t$('.pointer-popup').append(newInfoboxDetails);\n\t\t\t\t\t\t\t\t\t\t} //load all additional data you wish.\n\n\t\t\t\t\t\t\t\t\t\t// Define the fields you want to retrieve from the entity\n\t\t\t\t\t\t\t\t\t\tconst fieldsToRetrieve = ['address1_line1', 'address1_city', 'description'];\n\t\t\t\t\t\t\t\t\t\t// Replace with your actual field logical names\n\n\t\t\t\t\t\t\t\t\t\t// Retrieve the entity record using the Xrm.WebApi.retrieveRecord function\n\t\t\t\t\t\t\t\t\t\tXrm.WebApi.retrieveRecord(featureData.entityName, featureData.entityId, `?$select=${fieldsToRetrieve.join(',')}`).then(function (result) {\n\t\t\t\t\t\t\t\t\t\t\t//populate the infobox with your desired column data\n\t\t\t\t\t\t\t\t\t\t\tnewInfoboxDetails = \"<p class='details'>\";\n\t\t\t\t\t\t\t\t\t\t\tnewInfoboxDetails += 'Address: ' + result.address1_composite + '<br />';\n\t\t\t\t\t\t\t\t\t\t\tnewInfoboxDetails += 'City: ' + result.address1_city + '<br />';\n\t\t\t\t\t\t\t\t\t\t\tnewInfoboxDetails += 'Description: ' + result.description + '<br />';\n\t\t\t\t\t\t\t\t\t\t\tnewInfoboxDetails += '</p>';\n\t\t\t\t\t\t\t\t\t\t\t$('.pointer-popup .loadingDetails').html(newInfoboxDetails);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t//highlight-end\n\t\t}\n\t};\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"Let's see this code in action!"}),"\n",(0,o.jsxs)(e.p,{children:["First we turn on the datasource layer (in this case ",(0,o.jsx)(e.code,{children:"Accounts"}),") and wait for it to load. Then we will select one of the pins that has loaded on the map. We should see that while the desired data is being retrieved, the details pane changes to say ",(0,o.jsx)(e.code,{children:"loading..."})," and then be replaced with said data."]}),"\n",(0,o.jsx)(e.p,{children:"As you can see below we're now seeing the additional field data within the infobox as expected."}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:n(14330).A+"",width:"1054",height:"640"})}),"\n",(0,o.jsx)(e.p,{children:"Additionally, we can now click on the title of the infobox and this will open the record in a modal dialog."}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:n(17702).A+"",width:"1222",height:"873"})}),"\n",(0,o.jsx)(e.p,{children:"Below are gifs demonstrating this functionality in Dashboard and Record-Level respectively:"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:n(641).A+"",width:"1137",height:"770"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:n(25278).A+"",width:"1137",height:"770"})}),"\n",(0,o.jsxs)(e.p,{children:["Success! Using the code snippets above we have successfully listened to the ",(0,o.jsx)(e.code,{children:"FeaturesSelected"})," event and extended it to modify the infobox element to be populated with record data and allow us to interact with the title to separately open the record."]})]})}function p(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}},641:(t,e,n)=>{n.d(e,{A:()=>o});const o=n.p+"assets/images/dashboard-demonstration-a3cb13cd9a23b3fa86106e2f800cbc51.gif"},14330:(t,e,n)=>{n.d(e,{A:()=>o});const o=n.p+"assets/images/data-populating-d7ad03657eb926ad6a6ca426da750ab8.png"},25278:(t,e,n)=>{n.d(e,{A:()=>o});const o=n.p+"assets/images/demonstration-7ec46f265e7885917002c5d4b4038bd3.gif"},17702:(t,e,n)=>{n.d(e,{A:()=>o});const o=n.p+"assets/images/open-modal-9dac18891ff7dd57db36481832c771fe.png"},28453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>r});var o=n(96540);const a={},i=o.createContext(a);function s(t){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),o.createElement(i.Provider,{value:e},t.children)}}}]);