"use strict";(self.webpackChunkmaptaskr_docs_copy=self.webpackChunkmaptaskr_docs_copy||[]).push([[6357],{60916:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var o=n(74848),i=n(28453);const a={title:"Tutorials | Dynamics 365 Layer Attribute Popup Custom Actions | Configuring Custom JS",sidebar_label:"Configuring Custom JS"},s="Configuring Custom.JS",r={id:"tutorials/maptaskr-for-dynamics-365-layer-attribute-popup-custom-actions/configuring-custom-js",title:"Tutorials | Dynamics 365 Layer Attribute Popup Custom Actions | Configuring Custom JS",description:"Before we begin changing anything, please familiarise yourself with how to create your own Custom.JS by following this link Custom CSS & JavaScript.",source:"@site/docs/tutorials/maptaskr-for-dynamics-365-layer-attribute-popup-custom-actions/configuring-custom-js.md",sourceDirName:"tutorials/maptaskr-for-dynamics-365-layer-attribute-popup-custom-actions",slug:"/tutorials/maptaskr-for-dynamics-365-layer-attribute-popup-custom-actions/configuring-custom-js",permalink:"/docs/tutorials/maptaskr-for-dynamics-365-layer-attribute-popup-custom-actions/configuring-custom-js",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Tutorials | Dynamics 365 Layer Attribute Popup Custom Actions | Configuring Custom JS",sidebar_label:"Configuring Custom JS"},sidebar:"tutorialSidebar",previous:{title:"Maptaskr Configuration",permalink:"/docs/tutorials/maptaskr-for-dynamics-365-field-service/maptaskr-configuration"},next:{title:"Introduction",permalink:"/docs/tutorials/maptaskr-for-dynamics-365-layer-attribute-popup-custom-actions/introduction"}},l={},c=[];function u(t){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"configuring-customjs",children:"Configuring Custom.JS"}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsxs)(e.p,{children:["Before we begin changing anything, please familiarise yourself with how to create your own Custom.JS by following this link ",(0,o.jsx)(e.a,{href:"/docs/dynamics-365/installation-guide/advanced-configuration-and-capability#custom-css--javascript",children:"Custom CSS & JavaScript"}),".\nWe will also be utilising the ",(0,o.jsx)(e.a,{href:"/docs/dynamics-365/registerable-events/map-interaction-events#featuresselected",children:"Features Selected"})," event."]})}),"\n",(0,o.jsx)(e.p,{children:"Below is a snippet of the Custom.JS code for your reference:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'/* place your custom JS Code here. */\nconst onValidateFailErrorMessage = \'Please upload a file or draw a shape\'; //error message to display when the map validation errors\nconst onUploadFailErrorMessage = \'Something has gone wrong during submission, please check your connection and try again.\';\nconst onIntersectionMessage = \'Intersections / Exclusions have been found, please check your shapes and try again.\';\n\nasync function clientValidationFunction(executionContext, controlId) {\n\t//user defined validation function, can use the following for getting the list of shapes, annotations and uploaded files.\n\t//if the user needs to fix the shapes, throw an error.\n\n\tconsole.log(\'Validating shapes with:\');\n\tconsole.log(executionContext);\n\tconsole.log(controlId);\n\n\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\tif (!maptaskrControl) {\n\t\tconsole.error(\'Maptaskr Control not found\');\n\t\treturn;\n\t}\n\n\t//let shapes = _getShapes();\n\t//let annotation = _getAnnotation();\n\t//let uploads = _getUploadedFiles();\n\t//testing shape intersections and determine what to do with them\n\tconst shapeIntersections = await maptaskrControl.getShapeIntersections();\n\tif (shapeIntersections && shapeIntersections.length > 0) {\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Warning\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\t//throw new Error(onIntersectionMessage);\n\t\t}\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Error\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\tthrow new Error(onIntersectionMessage);\n\t\t}\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Exclusion\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\tthrow new Error(onIntersectionMessage);\n\t\t}\n\t}\n\n\t//you can also test to make sure your shapes are in the correct position, orintation, contained within eachother, any geometric tests here.\n\n\t//shapes will come in the format:\n\t// {\n\t//   "type": "FeatureCollection",\n\t//   "features": [\n\t//     {\n\t//       "type": "Feature",\n\t//       "geometry": {\n\t//         "type": "Polygon",\n\t//         "coordinates": [\n\t//           [\n\t//             [\n\t//               12899598.276481498,\n\t//               -3758060.96802893\n\t//             ],\n\t//      ...\n\t//           ]\n\t//         ]\n\t//       },\n\t//       "properties": {\n\t//         "uploadDocType": "Envelope",\n\t//         "markerType": "MARKER_SHAPE"\n\t//       }\n\t//     }\n\t//   ],\n\t//   "DocumentType": "Envelope",\n\t//   "annotationId": "1ffb72d6-c7c3-ed11-83fd-002248e1bcf1",\n\t//   "longlat": [\n\t//     12899440.776481498,\n\t//     -3758143.46802893\n\t//   ],\n\t//   "styleProperty": {\n\t//     "geometry_": null,\n\t//     "fill_": {\n\t//       "color_": "rgba(149,255,0,0.1)"\n\t//     },\n\t//  ...\n\t//   }\n\t// }\n\n\t//if you require a specific subset of objects, please look into the shapes, annotations, or uploads to ensure specific number of shapes or named shapes are included.\n}\n\nif (globalThis && globalThis.top) {\n\tglobalThis.top.maptaskrReady = function (pageContext, controlId) {\n\t\tconsole.log(\'Maptaskr Map ID: \' + controlId + \' has Loaded\');\n\n\t\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\n\t\tif (maptaskrControl) {\n\t\t\t/* Use the following console logs to uniquely identify your map */\n\t\t\t// console.log(pageContext);\n\t\t\t// console.log(maptaskrControl.registeredLocation);\n\t\t\t// console.log(maptaskrControl.webresourceLocation);\n\n\t\t\t/* register the correct client validation function here */\n\t\t\tmaptaskrControl.clientValidationFunction = clientValidationFunction;\n\n\t\t\t/* put your setup methods here */\n\t\t\t/* e.g. maptaskrControl.disableSaving = true; - this will disable the inbuilt save methods, you an use maptaskrControl.saveShapes() to save your own shapes.*/\n\n\t\t\t/* put your event registrations here. */\n\t\t\t/*  e.g. maptaskrControl.on("FeaturesSelected", ...) */\n\t\t}\n\t};\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["Now at the top of the file, let's declare a function called ",(0,o.jsx)(e.code,{children:"addButtonToDialog"}),". This function will target the appropriate HTML element to find a given attribute property and also render a custom button with its own ",(0,o.jsx)(e.code,{children:"onclick"})," function that you can customise to your requirements."]}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsxs)(e.p,{children:["In the example code below, we are specifically targetting an attribute property called ",(0,o.jsx)(e.code,{children:"tenid"}),". This will may not exist in the layer you are using so please adjust your code accordingly."]})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"function addButtonToDialog() {\n    // Check if the button already exists in the .sidebar-content-right\n    let sidenavContent = document.querySelector('.sidebar-content-right');\n    if (!sidenavContent) return; // Exit if the container doesn't exist\n    if (sidenavContent.querySelector('#selectProperty')) return; // Exit if button already exists\n\n    // Identify the current sidebar tenement id\n    let tenid = null;\n\n    let rows = sidenavContent.querySelectorAll('table tr');\n    rows.forEach((row) => {\n        let cells = row.querySelectorAll('td');\n        if (cells.length > 1) {\n            if (cells[0].textContent.trim() === 'tenid') {\n                tenid = cells[1].textContent.trim();\n            }\n        }\n    });\n\n    if (!tenid) {\n        console.warn('tenid not found in sidebar content.');\n        return;\n    }\n\n    // Create the button element\n    let button = document.createElement('button');\n    button.id = 'selectProperty';\n    button.className = 'btn btn-primary';\n    button.type = 'button';\n    button.style.backgroundColor = 'var(--main-colour)';\n    button.style.padding = '10px';\n    button.style.margin = '10px';\n    button.style.width = 'calc(100% - 20px)';\n    button.style.fontSize = '14px';\n\n    button.textContent = 'Do something cool';\n\n    // Set the button's click event\n    button.onclick = function (event) {\n        event.preventDefault(); // Prevent default behavior\n\n        alert(\"I can do something with the tenement id: \" + tenid);\n    };\n\n    // Add the button to the sidenav content\n    let targetDiv = document.querySelector(\".sidebar-content-right .sidebar-section table\");\n    if (targetDiv) {\n        targetDiv.insertBefore(button, targetDiv.firstChild);\n    }\n\n    // Hook up to all <a> elements in the dialog to re-call this function after timeout\n    let links = sidenavContent.querySelectorAll('a');\n    links.forEach((link) => {\n        link.addEventListener('click', () => {\n            setTimeout(addButtonToDialog, 100); // Re-call after a short delay\n        });\n    });\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Now we need to register the appropriate extension function within the ",(0,o.jsx)(e.code,{children:"maptaskrReady"})," functional scope. For this, we will use the ",(0,o.jsx)(e.a,{href:"/docs/dynamics-365/registerable-events/map-interaction-events#featuresselected",children:"Features Selected"})," event to ensure we fire ",(0,o.jsx)(e.code,{children:"addButtonToDialog"})," ",(0,o.jsx)(e.strong,{children:"only"})," if a layer feature has been selected. You can also customise this to limit it based on a specific layer."]}),"\n",(0,o.jsxs)(e.p,{children:["As shown in the highlighted code snippet below, we listen to ",(0,o.jsx)(e.code,{children:"FeaturesSelected"})," and trigger ",(0,o.jsx)(e.code,{children:"addButtonToDialog"})," in a timeout to cater for any delays in the UI."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"if (globalThis && globalThis.top) {\n\tglobalThis.top.maptaskrReady = function (pageContext, controlId) {\n\t\tconsole.log('Maptaskr Map ID: ' + controlId + ' has Loaded');\n\n\t\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\n\t\tif (maptaskrControl) {\n\n\t\t\tmaptaskrControl.clientValidationFunction = clientValidationFunction;\n\n            //put your event registrations here\n            maptaskrControl.on(\"FeaturesSelected\", function(featureArray) {\n                setTimeout(addButtonToDialog, 100); // Delay to allow for UI adjustments if necessary\n            });\n\t\t}\n\t};\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"Let's see this code in action!"}),"\n",(0,o.jsxs)(e.p,{children:["When a layer feature is selected,an attribute popup appears on the right-hand side of the screen and we should see our custom button appear on the top. Clicking this button should display an alert message containing the ",(0,o.jsx)(e.code,{children:"tenid"})," value from the attribute popup."]}),"\n",(0,o.jsxs)(e.p,{children:["Below is a gif demonstrating this functionality:\n",(0,o.jsx)(e.img,{src:n(91627).A+"",width:"1397",height:"1064"})]}),"\n",(0,o.jsxs)(e.p,{children:["Success! Using the code snippets above we have successfully listened to the ",(0,o.jsx)(e.code,{children:"FeaturesSelected"})," event and extended it to call a function that will generate a custom button with a custom action that can retrieve specific attribute data from the feature."]})]})}function d(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(u,{...t})}):u(t)}},91627:(t,e,n)=>{n.d(e,{A:()=>o});const o=n.p+"assets/images/demonstration-84d58fe64c4b63fa37609a40529cb686.gif"},28453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>r});var o=n(96540);const i={},a=o.createContext(i);function s(t){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:s(t.components),o.createElement(a.Provider,{value:e},t.children)}}}]);