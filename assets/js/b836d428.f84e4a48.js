"use strict";(self.webpackChunkmaptaskr_docs_copy=self.webpackChunkmaptaskr_docs_copy||[]).push([[2316],{93762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var s=t(74848),r=t(28453);const a={},i="Measurement Events",l={id:"power-pages/registerable-events/measurement-events/measurement-events",title:"Measurement Events",description:"MeasurementStarted",source:"@site/docs/power-pages/registerable-events/measurement-events/measurement-events.md",sourceDirName:"power-pages/registerable-events/measurement-events",slug:"/power-pages/registerable-events/measurement-events/",permalink:"/docs/power-pages/registerable-events/measurement-events/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"maptaskrSidebar",previous:{title:"Annotation Drawing Events",permalink:"/docs/power-pages/registerable-events/annotation-drawing-events/"},next:{title:"Map Interaction Events",permalink:"/docs/power-pages/registerable-events/map-interaction-events/"}},o={},d=[{value:"MeasurementStarted",id:"measurementstarted",level:2},{value:"Description",id:"description",level:3},{value:"Usage",id:"usage",level:3},{value:"Example",id:"example",level:4},{value:"Parameters",id:"parameters",level:3},{value:"Removing Event Listeners",id:"removing-event-listeners",level:3},{value:"Example",id:"example-1",level:4},{value:"MeasurementCompleted",id:"measurementcompleted",level:2},{value:"Description",id:"description-1",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Example",id:"example-2",level:4},{value:"Parameters",id:"parameters-1",level:3},{value:"Response Example",id:"response-example",level:3},{value:"Removing Event Listeners",id:"removing-event-listeners-1",level:3},{value:"Example",id:"example-3",level:4},{value:"MeasurementCancelled",id:"measurementcancelled",level:2},{value:"Description",id:"description-2",level:3},{value:"Usage",id:"usage-2",level:3},{value:"Example",id:"example-4",level:4},{value:"Parameters",id:"parameters-2",level:3},{value:"Removing Event Listeners",id:"removing-event-listeners-2",level:3},{value:"Example",id:"example-5",level:4},{value:"MeasurementsCleared",id:"measurementscleared",level:2},{value:"Description",id:"description-3",level:3},{value:"Usage",id:"usage-3",level:3},{value:"Example",id:"example-6",level:4},{value:"Parameters",id:"parameters-3",level:3},{value:"Removing Event Listeners",id:"removing-event-listeners-3",level:3},{value:"Example",id:"example-7",level:4}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"measurement-events",children:"Measurement Events"}),"\n",(0,s.jsx)(n.h2,{id:"measurementstarted",children:"MeasurementStarted"}),"\n",(0,s.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MeasurementStarted"})," event is triggered when a user initiates a measurement on a map using the Maptaskr for Power Pages App. This event provides information about the measurement type and the starting latitude and longitude coordinates."]}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["To listen for the ",(0,s.jsx)(n.code,{children:"MeasurementStarted"})," event, you can use the ",(0,s.jsx)(n.code,{children:"on"})," method of the ",(0,s.jsx)(n.code,{children:"window['maptaskrPCF']"})," object. This allows you to register an event listener that executes a call-back function when the event is triggered."]}),"\n",(0,s.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'window[\'maptaskrPCF\'].on("MeasurementStarted", function(measurementType, startLat, startLng) {\n\n    console.log("measurementType: " + measurementType);\n\n    console.log("startLat: " + startLat);\n\n    console.log("startLng: " + startLng);\n\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, we've registered an event listener for the ",(0,s.jsx)(n.code,{children:"MeasurementStarted"})," event. When the event occurs, the provided call-back function is executed, logging the measurement type, starting latitude, and starting longitude to the console."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"measurementType"})," (string): The type or category of the measurement being initiated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"startLat"})," (number): The latitude coordinate where the measurement started."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"startLng"})," (number): The longitude coordinate where the measurement started."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"removing-event-listeners",children:"Removing Event Listeners"}),"\n",(0,s.jsxs)(n.p,{children:["To remove the event listener for the ",(0,s.jsx)(n.code,{children:"MeasurementStarted"})," event, you can use the ",(0,s.jsx)(n.code,{children:"off"})," method of the ",(0,s.jsx)(n.code,{children:"window['maptaskrPCF']"})," object. This is useful when you no longer want to listen to this specific event."]}),"\n",(0,s.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"window['maptaskrPCF'].off(\"MeasurementStarted\");\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, the event listener for ",(0,s.jsx)(n.code,{children:"MeasurementStarted"})," is removed, ensuring that the associated call-back function no longer executes when the event is triggered."]}),"\n",(0,s.jsx)(n.h2,{id:"measurementcompleted",children:"MeasurementCompleted"}),"\n",(0,s.jsx)(n.h3,{id:"description-1",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MeasurementCompleted"})," event is triggered when a user completes a measurement on a map using the Maptaskr for Power Pages App. This event provides information about the measurement type, finishing latitude, finishing longitude, a polygon representation (if applicable), and any associated measurement text."]}),"\n",(0,s.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["To listen for the ",(0,s.jsx)(n.code,{children:"MeasurementCompleted"})," event, you can use the ",(0,s.jsx)(n.code,{children:"on"})," method of the ",(0,s.jsx)(n.code,{children:"window['maptaskrPCF']"})," object. This allows you to register an event listener that executes a call-back function when the event is triggered."]}),"\n",(0,s.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'window[\'maptaskrPCF\'].on("MeasurementCompleted", function(measurementType, finishLat, finishLong, polygon, measurementText) {\n\n    console.log("measurementType: " + measurementType);\n\n    console.log("finishLat: " + finishLat);\n\n    console.log("finishLong: " + finishLong);\n\n    console.log("polygon: " + polygon);\n\n    console.log("measurementText: " + measurementText);\n\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, we've registered an event listener for the ",(0,s.jsx)(n.code,{children:"MeasurementCompleted"})," event. When the event occurs, the provided call-back function is executed, logging the measurement type, finishing latitude, finishing longitude, polygon representation (if available), and measurement text to the console."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"measurementType"})," (string): The type or category of the completed measurement."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"finishLat"})," (number): The latitude coordinate where the measurement was completed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"finishLong"})," (number): The longitude coordinate where the measurement was completed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"polygon"})," (string): A polygon representation of the completed measurement area, if applicable."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"measurementText"})," (string): The size of the shape associated with the measurement."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"response-example",children:"Response Example"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"polygon"})," returned will be a JavaScript Object in the format provided below (with some properties excluded for brevity)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n\n    "extent": "10609400.86028076,-2857630.8013220704,11559380.547374066,-2036576.928905712",\n\n    "geometry": {\n\n        "geometry":\n        "10616186.429474283,-2321570.835033704,10609400.86028076,-2857630.8013220704,11186174.241730267,-2769418.4018062633,11559380.547374066,-2036576.928905712,10616186.429474283,-2321570.835033704",\n\n        "type": "Polygon"\n\n    },\n\n    "shapeSize": "Area: 383738727653.13 m\xb2",\n\n    "attributes": {\n\n        "ShapeSize": "Area: 383738727653.13 m\xb2"\n\n    }\n\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"removing-event-listeners-1",children:"Removing Event Listeners"}),"\n",(0,s.jsxs)(n.p,{children:["To remove the event listener for the ",(0,s.jsx)(n.code,{children:"MeasurementCompleted"})," event, you can use the ",(0,s.jsx)(n.code,{children:"off"})," method of the ",(0,s.jsx)(n.code,{children:"window['maptaskrPCF']"})," object. This is useful when you no longer want to listen to this specific event."]}),"\n",(0,s.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"window['maptaskrPCF'].off(\"MeasurementCompleted\");\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, the event listener for ",(0,s.jsx)(n.code,{children:"MeasurementCompleted"})," is removed, ensuring that the associated call-back function no longer executes when the event is triggered."]}),"\n",(0,s.jsx)(n.h2,{id:"measurementcancelled",children:"MeasurementCancelled"}),"\n",(0,s.jsx)(n.h3,{id:"description-2",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MeasurementCancelled"})," event is triggered when a user cancels a measurement on a map using the Maptaskr for Power Pages App. This event provides information about the measurement type that was cancelled."]}),"\n",(0,s.jsx)(n.h3,{id:"usage-2",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["To listen for the ",(0,s.jsx)(n.code,{children:"MeasurementCancelled"})," event, you can use the ",(0,s.jsx)(n.code,{children:"on"})," method of the ",(0,s.jsx)(n.code,{children:"window['maptaskrPCF']"})," object. This allows you to register an event listener that executes a call-back function when the event is triggered."]}),"\n",(0,s.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'window[\'maptaskrPCF\'].on("MeasurementCancelled", function(measurementType) {\n\n    console.log("measurementType: " + measurementType);\n\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, we've registered an event listener for the ",(0,s.jsx)(n.code,{children:"MeasurementCancelled"})," event. When the event occurs, the provided call-back function is executed, logging the type of the cancelled measurement to the console."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"measurementType"})," (string): The type or category of the cancelled measurement."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"removing-event-listeners-2",children:"Removing Event Listeners"}),"\n",(0,s.jsxs)(n.p,{children:["To remove the event listener for the ",(0,s.jsx)(n.code,{children:"MeasurementCancelled"})," event, you can use the ",(0,s.jsx)(n.code,{children:"off"})," method of the ",(0,s.jsx)(n.code,{children:"window['maptaskrPCF']"})," object. This is useful when you no longer want to listen to this specific event."]}),"\n",(0,s.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"window['maptaskrPCF'].off(\"MeasurementCancelled\");\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, the event listener for ",(0,s.jsx)(n.code,{children:"MeasurementCancelled"})," is removed, ensuring that the associated call-back function no longer executes when the event is triggered."]}),"\n",(0,s.jsx)(n.h2,{id:"measurementscleared",children:"MeasurementsCleared"}),"\n",(0,s.jsx)(n.h3,{id:"description-3",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MeasurementsCleared"})," event is triggered when a user clears all measurements from the map using the Maptaskr for Power Pages App. This event indicates the completion of measurement deletion."]}),"\n",(0,s.jsx)(n.h3,{id:"usage-3",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["To listen for the ",(0,s.jsx)(n.code,{children:"MeasurementsCleared"})," event, you can use the ",(0,s.jsx)(n.code,{children:"on"})," method of the ",(0,s.jsx)(n.code,{children:"window['maptaskrPCF']"})," object. This allows you to register an event listener that executes a call-back function when the event is triggered."]}),"\n",(0,s.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'window[\'maptaskrPCF\'].on("MeasurementsCleared", function() {\n\n    console.log("Measurement Deletion Completed");\n\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, we've registered an event listener for the ",(0,s.jsx)(n.code,{children:"MeasurementsCleared"})," event. When the event occurs, the provided call-back function is executed, indicating the completion of measurement deletion by logging a message to the console."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsx)(n.p,{children:"This event does not have any parameters."}),"\n",(0,s.jsx)(n.h3,{id:"removing-event-listeners-3",children:"Removing Event Listeners"}),"\n",(0,s.jsxs)(n.p,{children:["To remove the event listener for the ",(0,s.jsx)(n.code,{children:"MeasurementsCleared"})," event, you can use the ",(0,s.jsx)(n.code,{children:"off"})," method of the ",(0,s.jsx)(n.code,{children:"window['maptaskrPCF']"})," object. This is useful when you no longer want to listen for this specific event."]}),"\n",(0,s.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"window['maptaskrPCF'].off(\"MeasurementsCleared\");\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the example above, the event listener for ",(0,s.jsx)(n.code,{children:"MeasurementsCleared"})," is removed, ensuring that the associated call-back function no longer executes when the event is triggered."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);