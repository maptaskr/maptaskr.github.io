"use strict";(self.webpackChunkmaptaskr_docs_copy=self.webpackChunkmaptaskr_docs_copy||[]).push([[6849],{17016:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(74848),a=n(28453);const s={title:"Tutorials | Zoom Based Layer Control | Configuring Custom.JS",sidebar_label:"Configuring Custom.JS"},r="Configuring Custom.JS",i={id:"tutorials/maptaskr-for-dynamics-365-layer-zoom-control/configuring-custom-js",title:"Tutorials | Zoom Based Layer Control | Configuring Custom.JS",description:"Below is a snippet of the Custom.JS code for your reference:",source:"@site/docs/tutorials/maptaskr-for-dynamics-365-layer-zoom-control/configuring-custom-js.md",sourceDirName:"tutorials/maptaskr-for-dynamics-365-layer-zoom-control",slug:"/tutorials/maptaskr-for-dynamics-365-layer-zoom-control/configuring-custom-js",permalink:"/docs/tutorials/maptaskr-for-dynamics-365-layer-zoom-control/configuring-custom-js",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Tutorials | Zoom Based Layer Control | Configuring Custom.JS",sidebar_label:"Configuring Custom.JS"},sidebar:"maptaskrSidebar",previous:{title:"Introduction",permalink:"/docs/tutorials/maptaskr-for-dynamics-365-layer-zoom-control/introduction"},next:{title:"Frequently Asked Questions",permalink:"/docs/faq/"}},l={},c=[];function d(t){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"configuring-customjs",children:"Configuring Custom.JS"}),"\n",(0,o.jsx)(e.p,{children:"Below is a snippet of the Custom.JS code for your reference:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'/* place your custom JS Code here. */\nconst onValidateFailErrorMessage = \'Please upload a file or draw a shape\'; //error message to display when the map validation errors\nconst onUploadFailErrorMessage = \'Something has gone wrong during submission, please check your connection and try again.\';\nconst onIntersectionMessage = \'Intersections / Exclusions have been found, please check your shapes and try again.\';\n\nasync function clientValidationFunction(executionContext, controlId) {\n\t//user defined validation function, can use the following for getting the list of shapes, annotations and uploaded files.\n\t//if the user needs to fix the shapes, throw an error.\n\n\tconsole.log(\'Validating shapes with:\');\n\tconsole.log(executionContext);\n\tconsole.log(controlId);\n\n\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\tif (!maptaskrControl) {\n\t\tconsole.error(\'Maptaskr Control not found\');\n\t\treturn;\n\t}\n\n\t//let shapes = _getShapes();\n\t//let annotation = _getAnnotation();\n\t//let uploads = _getUploadedFiles();\n\t//testing shape intersections and determine what to do with them\n\tconst shapeIntersections = await maptaskrControl.getShapeIntersections();\n\tif (shapeIntersections && shapeIntersections.length > 0) {\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Warning\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\t//throw new Error(onIntersectionMessage);\n\t\t}\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Error\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\tthrow new Error(onIntersectionMessage);\n\t\t}\n\t\tif (shapeIntersections.some((res) => res.intersectionType == \'Exclusion\')) {\n\t\t\t//decide what to do with warnings\n\t\t\t//if you want them resolved, throw an error here..\n\t\t\tthrow new Error(onIntersectionMessage);\n\t\t}\n\t}\n\n\t//you can also test to make sure your shapes are in the correct position, orintation, contained within eachother, any geometric tests here.\n\n\t//shapes will come in the format:\n\t// {\n\t//   "type": "FeatureCollection",\n\t//   "features": [\n\t//     {\n\t//       "type": "Feature",\n\t//       "geometry": {\n\t//         "type": "Polygon",\n\t//         "coordinates": [\n\t//           [\n\t//             [\n\t//               12899598.276481498,\n\t//               -3758060.96802893\n\t//             ],\n\t//      ...\n\t//           ]\n\t//         ]\n\t//       },\n\t//       "properties": {\n\t//         "uploadDocType": "Envelope",\n\t//         "markerType": "MARKER_SHAPE"\n\t//       }\n\t//     }\n\t//   ],\n\t//   "DocumentType": "Envelope",\n\t//   "annotationId": "1ffb72d6-c7c3-ed11-83fd-002248e1bcf1",\n\t//   "longlat": [\n\t//     12899440.776481498,\n\t//     -3758143.46802893\n\t//   ],\n\t//   "styleProperty": {\n\t//     "geometry_": null,\n\t//     "fill_": {\n\t//       "color_": "rgba(149,255,0,0.1)"\n\t//     },\n\t//  ...\n\t//   }\n\t// }\n\n\t//if you require a specific subset of objects, please look into the shapes, annotations, or uploads to ensure specific number of shapes or named shapes are included.\n}\n\nif (globalThis && globalThis.top) {\n\tglobalThis.top.maptaskrReady = function (pageContext, controlId) {\n\t\tconsole.log(\'Maptaskr Map ID: \' + controlId + \' has Loaded\');\n\n\t\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\n\t\tif (maptaskrControl) {\n\t\t\t/* Use the following console logs to uniquely identify your map */\n\t\t\t// console.log(pageContext);\n\t\t\t// console.log(maptaskrControl.registeredLocation);\n\t\t\t// console.log(maptaskrControl.webresourceLocation);\n\n\t\t\t/* register the correct client validation function here */\n\t\t\tmaptaskrControl.clientValidationFunction = clientValidationFunction;\n\n\t\t\t/* put your setup methods here */\n\t\t\t/* e.g. maptaskrControl.disableSaving = true; - this will disable the inbuilt save methods, you an use maptaskrControl.saveShapes() to save your own shapes.*/\n\n\t\t\t/* put your event registrations here. */\n\t\t\t/*  e.g. maptaskrControl.on("FeaturesSelected", ...) */\n\t\t}\n\t};\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["At the very bottom of the file, let's declare a variable that we will use to control an ",(0,o.jsx)(e.code,{children:"Interval"}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"let layerWatcher;\n"})}),"\n",(0,o.jsx)(e.p,{children:"Next, we need to add a three new functions at the bottom of the file that will be responsible for disabling the checkbox for a given layer and turning it off if you happen to zoom past the threshold with the layer on."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"enableLayer"})," accepts a ",(0,o.jsx)(e.code,{children:"name"})," parameter which is the display name of the Layer we would like to enable."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"disableAndTurnOffLayer"})," accepts accepts a ",(0,o.jsx)(e.code,{children:"name"})," parameter which is the display name of the Layer we would like to turn off and disable."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"enableDisableLayer"})," is the main function that accepts a ",(0,o.jsx)(e.code,{children:"enabled"})," boolean parameter and a ",(0,o.jsx)(e.code,{children:"name"})," parameter which will determine which layer to enable/disable and turn off."]}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsx)(e.p,{children:"You can tweak this to your specifications"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"function enableDisableLayer(enabled, name) {\n\treturn new Promise((resolve, reject) => {\n\t\t//remove any instance of the interval\n\t\tclearInterval(layerWatcher);\n\n\t\t//cancel the interval if layer not found in 10000 ms (10 sec)\n\t\tsetTimeout(() => {\n\t\t\tclearInterval(layerWatcher);\n\t\t\treject();\n\t\t}, 10000);\n\t\tlayerWatcher = setInterval(() => {\n\t\t\tconsole.log('watching...');\n\t\t\tlet layer = $('label').filter((l, lab) => {\n\t\t\t\treturn lab.innerText.indexOf(name) > -1;\n\t\t\t});\n\t\t\tif (layer.length > 0) {\n\t\t\t\tconsole.log('found!');\n\t\t\t\tlet checkbox = layer.parent().parent().find('input[type=checkbox]');\n\t\t\t\tif (enabled) {\n\t\t\t\t\tcheckbox[0].disabled = false;\n\t\t\t\t} else {\n\t\t\t\t\t//if the layer is checked/ticked and on, let's turn it off\n\t\t\t\t\tif (checkbox[0].checked) checkbox.click();\n\t\t\t\t\tcheckbox[0].disabled = true;\n\t\t\t\t}\n\t\t\t\tclearInterval(layerWatcher);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t}, 50);\n\t\t\t}\n\t\t}, 50);\n\t});\n}\nfunction enableLayer(name) {\n\treturn enableDisableLayer(true, name);\n}\n\nfunction disableAndTurnOffLayer(name) {\n\treturn enableDisableLayer(false, name);\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Now we need to register the appropriate extension function within the ",(0,o.jsx)(e.code,{children:"maptaskrReady"})," functional scope. For this, we will use the ",(0,o.jsx)(e.a,{href:"/docs/dynamics-365/registerable-events/map-interaction-events#zoomchanged",children:"ZoomChanged"})," event to ensure we fire ",(0,o.jsx)(e.code,{children:"enableLayer"})," or ",(0,o.jsx)(e.code,{children:"disableAndTurnOffLayer"})," ",(0,o.jsx)(e.strong,{children:"only"})," if the correct zoom threshold has been met. In this case we will use a layer called ",(0,o.jsx)(e.code,{children:"Single RoadAssets_DataPortal"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["As shown in the highlighted code snippet below, we first manually fire a ",(0,o.jsx)(e.code,{children:"ZoomChanged"})," event when the map is ready to ensure that the given layer is enabled/disabled at the very beginning. This is helpful in situations, for example, where the default zoom is set to be quite far out and a given layer needs to be available ",(0,o.jsx)(e.strong,{children:"only"})," when the zoom is closer.\nThen below that we listen to ",(0,o.jsx)(e.code,{children:"ZoomChanged"})," events and if the zoom is greater or equal to 12, we want to enable our ",(0,o.jsx)(e.code,{children:"Single RoadAssets_DataPortal"})," layer. Likewise, when the zoom is beyond this threshold, we want to disable that layer."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"if (globalThis && globalThis.top) {\n\tglobalThis.top.maptaskrReady = function (pageContext, controlId) {\n\t\tconsole.log('Maptaskr Map ID: ' + controlId + ' has Loaded');\n\n\t\tlet maptaskrControl = globalThis && globalThis.top && globalThis.top.maptaskrCORE && globalThis.top.maptaskrCORE[controlId];\n\n\t\tif (maptaskrControl) {\n\t\t\tmaptaskrControl.clientValidationFunction = clientValidationFunction;\n\t\t\t//highlight-start\n\t\t\t//To prevent users from being able to select the layer when the map loads, trigger a zoom change\n\t\t\tmaptaskrControl.fire('ZoomChanged', 5, 5);\n\t\t\tmaptaskrControl.on('ZoomChanged', async function (previousZoom, newZoom) {\n\t\t\t\tconsole.log('Zoom Changed from ' + previousZoom + ' to ' + newZoom);\n\t\t\t\tif (newZoom >= 12) {\n\t\t\t\t\t//turn on layer\n\t\t\t\t\tawait enableLayer('Single RoadAssets_DataPortal');\n\t\t\t\t} else {\n\t\t\t\t\t//turn it off and/or disable\n\t\t\t\t\tawait disableAndTurnOffLayer('Single RoadAssets_DataPortal');\n\t\t\t\t}\n\t\t\t});\n\t\t\t//highlight-end\n\t\t}\n\t};\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"Let's see this code in action!"}),"\n",(0,o.jsxs)(e.p,{children:["When the map initially loads we are expecting ",(0,o.jsx)(e.code,{children:"Single RoadAssets_DataPortal"})," to be disabled. Then, when we zoom in close enough the layer checkbox should become clickable and we can switch it on. Finally, when we zoom out beyond the threshold the layer should automatically turn off and the checkbox should be greyed out and not be clickable until we zoom in again."]}),"\n",(0,o.jsx)(e.p,{children:"Below is a gif demonstrating this functionality:"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:n(20640).A+"",width:"1343",height:"296"})}),"\n",(0,o.jsxs)(e.p,{children:["Success! Using the code snippets above we have successfully listened to the ",(0,o.jsx)(e.code,{children:"ZoomChanged"})," event and extended it to call a function that will crawl the DOM to find the appropriate layer and enable/disable them."]})]})}function h(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}},20640:(t,e,n)=>{n.d(e,{A:()=>o});const o=n.p+"assets/images/enable-disable-layer-fa1a125f9c5be55fec698df499a29420.gif"},28453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>i});var o=n(96540);const a={},s=o.createContext(a);function r(t){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:r(t.components),o.createElement(s.Provider,{value:e},t.children)}}}]);